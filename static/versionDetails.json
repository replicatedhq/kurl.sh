{
  "kubernetes": [
    {
      "flag": "version",
      "description": "The version of kubernetes to be installed.",
      "type": "string"
    },
    {
      "flag": "serviceCIDR",
      "description": "Customize the range of virtual IPs assigned to services.",
      "type": "string"
    },
    {
      "flag": "serviceCidrRange",
      "description": "The size of the CIDR for Kubernetes (can be presented as just a number or with a preceding slash).",
      "type": "string"
    },
    {
      "flag": "bootstrapToken",
      "description": "Authentication token used by kubernetes when adding nodes. The default is an auto-generated token.",
      "type": "string"
    },
    {
      "flag": "bootstrapTokenTTL",
      "description": "TTL of the bootstrap-token. The default is 24 hours.",
      "type": "string"
    },
    {
      "flag": "certKey",
      "description": " A secret needed for new primary nodes to join an existing cluster (read-only).",
      "type": "string"
    },
    {
      "flag": "controlPlane",
      "description": "Used during a join script to indicate that the node will be an additional primary (read-only).",
      "type": "boolean"
    },
    {
      "flag": "kubeadmToken",
      "description": "Generated during the install script, used for nodes joining (read-only).",
      "type": "string"
    },
    {
      "flag": "kubeadmTokenCAHash",
      "description": "Generated during the install script, used for nodes joining (read-only).",
      "type": "string"
    },
    {
      "flag": "loadBalancerAddress",
      "description": "Used for High Availability installs, indicates the address of the external load balancer.",
      "type": "string"
    },
    {
      "flag": "masterAddress",
      "description": "The address of the internal Kubernetes API server, used during join scripts (read-only).",
      "type": "string"
    },
    {
      "flag": "preflightIgnore",
      "description": "Ignore preflight failures and warnings.",
      "type": "boolean"
    },
    {
      "flag": "preflightIgnoreWarnings",
      "description": "Ignore preflight warnings.",
      "type": "boolean"
    },
    {
      "flag": "HACluster",
      "description": "Create the cluster as a high availability cluster (note that this needs a valid load balancer address and additional nodes to be a truly HA cluster.",
      "type": "boolean"
    }
  ],
  "weave": [
    {
      "flag": "version",
      "description": "The version of weave to be installed.",
      "type": "string"
    },
    {
      "flag": "isEncryptionDisabled",
      "description": "Encrypt network communication between nodes in the cluster.",
      "type": "boolean"
    },
    {
      "flag": "podCIDR",
      "description": "The subnet where pods will be found.",
      "type": "string"
    },
    {
      "flag": "podCidrRange",
      "description": "The size of the CIDR where pods can be found.",
      "type": "string"
    }
  ],
  "antrea": [
    {
      "flag": "version",
      "description": "The version of antrea to be installed.",
      "type": "string"
    },
    {
      "flag": "isEncryptionDisabled",
      "description": "Encrypt network communication between nodes in the cluster.",
      "type": "boolean"
    },
    {
      "flag": "podCIDR",
      "description": "The subnet where pods will be found.",
      "type": "string"
    },
    {
      "flag": "podCidrRange",
      "description": "The size of the CIDR where pods can be found.",
      "type": "string"
    }
  ],
  "contour": [
    {
      "flag": "version",
      "description": "The version of contour to be installed.",
      "type": "string"
    },
    {
      "flag": "tlsMinimumProtocolVersion",
      "description": "The minimum TLS protocol version that is allowed (default \"1.2\").",
      "type": "string"
    },
    {
      "flag": "httpPort",
      "description": "The NodePort exposed for http Ingress.",
      "type": "number"
    },
    {
      "flag": "httpsPort",
      "description": "The NodePort exposed for https (TLS) Ingress.",
      "type": "number"
    }
  ],
  "rook": [
    {
      "flag": "version",
      "description": "The version of rook to be installed.",
      "type": "string"
    },
    {
      "flag": "storageClassName",
      "description": "The name of the StorageClass that will use Rook to provision PVCs.",
      "type": "string"
    },
    {
      "flag": "cephReplicaCount",
      "description": "Replication factor of ceph pools. The default is to use the number of nodes in the cluster, up to a maximum of 3.",
      "type": "number"
    },
    {
      "flag": "isBlockStorageEnabled",
      "description": "Use block devices instead of the filesystem for storage in the Ceph cluster.",
      "type": "boolean"
    },
    {
      "flag": "isSharedFilesystemDisabled",
      "description": "Disable the rook-ceph shared filesystem, reducing CPU and Memory load by no longer needing to schedule several pods. 1.4.3+",
      "type": "boolean"
    },
    {
      "flag": "blockDeviceFilter",
      "description": "Only use block devices matching this regex.",
      "type": "string"
    },
    {
      "flag": "hostpathRequiresPrivileged",
      "description": "Runs Ceph Pods as privileged to be able to write to hostPaths in OpenShift with SELinux restrictions.",
      "type": "boolean"
    },
    {
      "flag": "bypassUpgradeWarning",
      "description": "Bypass upgrade warning prompt.",
      "type": "boolean"
    }
  ],
  "docker": [
    {
      "flag": "version",
      "description": "The version of docker to be installed.",
      "type": "string"
    },
    {
      "flag": "bypassStorageDriverWarnings",
      "description": "Bypass Docker warnings when using the devicemapper storage driver in loopback mode.",
      "type": "boolean"
    },
    {
      "flag": "hardFailOnLoopback",
      "description": "Set to false to allow installation to proceed when Docker is detected to be using the devicemapper storage driver in loopback mode. By default the installer will abort when loopback mode is detected because of instability.",
      "type": "boolean"
    },
    {
      "flag": "noCEOnEE",
      "description": "Disable installation of Docker CE onto platforms it does not support - RHEL, SLES and Oracle Linux.",
      "type": "boolean"
    },
    {
      "flag": "daemonConfig",
      "description": "This is where a docker daemon.json config may be added as a string field.",
      "type": "string"
    },
    {
      "flag": "preserveConfig",
      "description": "This flag will ensure that nothing is changed in the existing docker config on the system, regardless of other options.",
      "type": "boolean"
    },
    {
      "flag": "dockerRegistryIP",
      "description": "This is the location of the docker registry, used by additional nodes during a join script. It is not customizable by the user during an initial install.",
      "type": "string"
    }
  ],
  "prometheus": [
    {
      "flag": "version",
      "description": "The version of prometheus to be installed.",
      "type": "string"
    },
    {
      "flag": "serviceType",
      "description": "The kubernetes service type to use for prometheus and grafana. Currently supported options are ClusterIP and NodePort.",
      "type": "string"
    }
  ],
  "registry": [
    {
      "flag": "version",
      "description": "The version of registry to be installed.",
      "type": "string"
    },
    {
      "flag": "publishPort",
      "description": "Add a NodePort service to the registry.",
      "type": "number"
    }
  ],
  "velero": [
    {
      "flag": "version",
      "description": "The version of velero to be installed.",
      "type": "string"
    },
    {
      "flag": "namespace",
      "description": "Install the Velero server into an alternative namesapce. Default is 'velero'",
      "type": "string"
    },
    {
      "flag": "disableCLI",
      "description": "Do not install the velero CLI.",
      "type": "boolean"
    },
    {
      "flag": "disableRestic",
      "description": "Do not install the Restic integration. Volume data will not be included in backups if Restic is disabled",
      "type": "boolean"
    },
    {
      "flag": "localBucket",
      "description": "Create an alternative bucket in the local ceph RGW store for the initial backend. Default is 'velero'",
      "type": "string"
    },
    {
      "flag": "resticRequiresPrivileged",
      "description": "Runs Restic container in privileged mode",
      "type": "boolean"
    }
  ],
  "kotsadm": [
    {
      "flag": "version",
      "description": "The version of kotsadm to be installed.",
      "type": "string"
    },
    {
      "flag": "applicationSlug",
      "description": "The slug shown on the app settings page of vendor web",
      "type": "string"
    },
    {
      "flag": "uiBindPort",
      "description": "This is the port where the KOTS admin console can be interacted with via browser",
      "type": "number"
    },
    {
      "flag": "hostname",
      "description": "The hostname that the admin console will be exposed on",
      "type": "string"
    },
    {
      "flag": "applicationNamespace",
      "description": "An additional namespace that should be pre-created during the install (For applications that install to other namespaces outside of the one where kotsadm is running)",
      "type": "string"
    },
    {
      "flag": "disableS3",
      "description": "Migrate application archives and support bundles from S3 and use a local volume in the kotsadm statefulset instead. The migration process is irreversible and will replace the kotsadm deployment with a statefulset. Defaults to 'false'",
      "type": "boolean"
    }
  ],
  "firewalld": [
    {
      "flag": "bypassFirewalldWarning",
      "description": "By default, a kURL install will not continue with firewalld active. When this flag is set, kURL will continue to install.",
      "type": "boolean"
    },
    {
      "flag": "disableFirewalld",
      "description": "This is a flag that allows for disabling firewalld during the install script without user interaction. Note that if disableFirewalld and preserveConfig are set to True, preserveConfig will take precedence.",
      "type": "boolean"
    },
    {
      "flag": "hardFailOnFirewalld",
      "description": "This is a flag that will stop and exit a current install if firewalld is active.",
      "type": "boolean"
    },
    {
      "flag": "firewalld",
      "description": "This flag describes the desired state of firewalld, either enabled or disabled.",
      "type": "string"
    },
    {
      "flag": "firewalldCmds",
      "description": "This is a list of arguments that may be passed in to kURL and executed by firewall-cmd during the install. Multiple commands may be run.",
      "type": "string"
    },
    {
      "flag": "preserveConfig",
      "description": "This flag will ensure that nothing is changed in the existing firewalld config on the system, regardless of other options.",
      "type": "boolean"
    }
  ],
  "iptables": [
    {
      "flag": "iptablesCmds",
      "description": "This is a list of arguments that may be passed in to kURL and executed by iptables during the install. Multiple commands may be run.",
      "type": "string"
    },
    {
      "flag": "preserveConfig",
      "description": "This flag will ensure that nothing is changed in the existing iptables config on the system, regardless of other options.",
      "type": "boolean"
    }
  ],
  "kurl": [
    {
      "flag": "airgap",
      "description": "This flag signifies that the installer will use an airgap bundle to install the file, which means it will not need an internet connection.",
      "type": "boolean"
    },
    {
      "flag": "proxyAddress",
      "description": "Configures Docker to use a proxy when pulling images and sets proxy environment variables for the kotsadm add-on. Must include http(s) and may include port.",
      "type": "string"
    },
    {
      "flag": "noProxy",
      "description": "If present, do not use a proxy. Disables automatic proxy detection and configuration.",
      "type": "boolean"
    },
    {
      "flag": "additionalNoProxyAddresses",
      "description": "A list of addresses that can be accessed without using a proxy.",
      "type": "list"
    },
    {
      "flag": "nameserver",
      "description": "Configures CoreDNS to forward DNS requests to a specific nameserver rather than parsing resolv.conf",
      "type": "string"
    },
    {
      "flag": "publicAddress",
      "description": "The public IP address that will be added to the SANs of any certificates generated for host services. Setting this disables detection from the environment and prompt.",
      "type": "string"
    },
    {
      "flag": "privateAddress",
      "description": "The private IP address used for internal communication between components. Setting this disables detection from the host and prompt.",
      "type": "string"
    },
    {
      "flag": "hostnameCheck",
      "description": "This is an option for use during a join script to ensure that the join is only run on the node it is targeted for.",
      "type": "string"
    },
    {
      "flag": "installerVersion",
      "description": "The release version of kURL to install with.",
      "type": "string"
    }
  ],
  "selinux": [
    {
      "flag": "chconCmds",
      "description": "This is a list of arguments that may be passed in to kURL and executed by chcon during the install. Multiple commands may be run.",
      "type": "string"
    },
    {
      "flag": "disableSelinux",
      "description": "This is a flag that allows for disabling selinux during the install script without user interaction. Note that if disableSelinux and preserveConfig are set to True, preserveConfig will take precedence.",
      "type": "boolean"
    },
    {
      "flag": "preserveConfig",
      "description": "This flag will ensure that nothing is changed in the existing selinux config on the system, regardless of other options.",
      "type": "boolean"
    },
    {
      "flag": "semanageCmds",
      "description": "This is a list of arguments that may be passed in to kURL and executed by semanage during the install. Multiple commands may be run.",
      "type": "string"
    },
    {
      "flag": "selinux",
      "description": "This option sets the desired state of selinux, choices are enforcing, permissive, disabled.",
      "type": "string"
    }
  ],
  "openebs": [
    {
      "flag": "version",
      "description": "The version of OpenEBS to be installed.",
      "type": "string"
    },
    {
      "flag": "namespace",
      "description": "The namespace Open EBS is installed to.",
      "type": "string"
    },
    {
      "flag": "isLocalPVEnabled",
      "description": "Turn on localPV storage provisioning. localPV uses /var/openebs/local for storage and does not replicate data between nodes.",
      "type": "boolean"
    },
    {
      "flag": "localPVStorageClassName",
      "description": "StorageClass name for local PV provisioner (Name it “default” to make it the cluster’s default provisioner).",
      "type": "string"
    },
    {
      "flag": "isCstorEnabled",
      "description": "Turn on cStor storage provisioning. cStor relies on block devices and supports replicating data between nodes.",
      "type": "boolean"
    },
    {
      "flag": "cstorStorageClassName",
      "description": "The StorageClass name for cstor provisioner (Name it “default” to make it the cluster’s default provisioner).",
      "type": "string"
    }
  ],
  "ekco": [
    {
      "flag": "version",
      "description": "The version of EKCO to be installed.",
      "type": "string"
    },
    {
      "flag": "nodeUnreachableToleration",
      "description": "How long a Node must be unreachable before considered dead. Default is 1h.",
      "type": "string"
    },
    {
      "flag": "minReadyMasterNodeCount",
      "description": "Don't purge the node if it will result in less than this many ready primaries. Default is 2.",
      "type": "number"
    },
    {
      "flag": "minReadyWorkerNodeCount",
      "description": "Don't purge the node if it will result in less than this many ready workers. Default is 0.",
      "type": "number"
    },
    {
      "flag": "rookShouldUseAllNodes",
      "description": "This will disable management of nodes in the CephCluster resource. If false, ekco will add nodes to the storage list and remove them when a node is purged.",
      "type": "boolean"
    },
    {
      "flag": "shouldDisableRebootServices",
      "description": "Do not install the systemd shutdown service that cordons a node and deletes pods with PVC and Shared FS volumes mounted.",
      "type": "boolean"
    },
		{
			"flag": "shouldDisableClearNodes",
			"description": "Do not force-delete pods stuck in terminating state on unreachable nodes",
			"type": "boolean"
		},
		{
			"flag": "shouldEnablePurgeNodes",
			"description": "Automatically delete and cleanup unreachable nodes",
			"type": "boolean"
		},
		{
			"flag": "autoUpgradeSchedule",
			"description": "Schedule to automatically check for and install updates, when `auto-upgrades-enabled` is used",
			"type": "string"
		}
  ],
  "fluentd": [
    {
      "flag": "version",
      "description": "The version of Fluentd to be installed.",
      "type": "string"
    },
    {
      "flag": "fullEFKStack",
      "description": "This will ensure that ElasticSearch and Kibana will be installed for log aggregation and visualization.",
      "type": "boolean"
    },
    {
      "flag": "fluentdConfPath",
      "description": "The absolute path to a custom Fluentd config file.",
      "type": "string"
    }
  ],
  "minio": [
    {
      "flag": "version",
      "description": "The version of minio to be installed.",
      "type": "string"
    },
    {
      "flag": "namespace",
      "description": "Changes the namespace in which minio will be installed into.",
      "type": "string"
    },
    {
      "flag": "hostPath",
      "description": "Configure minio to use a local hostPath for storing data.",
      "type": "string"
    }
  ],
  "calico": [
    {
      "flag": "version",
      "description": "The version of calico to be installed.",
      "type": "string"
    }
  ],
  "containerd": [
    {
      "flag": "version",
      "description": "The version of containerd to be installed",
      "type": "string"
    },
    {
      "flag": "tomlConfig",
      "description": "Containerd config settings that will be merged into /etc/containerd/config.toml",
      "type": "string"
    },
    {
      "flag": "preserveConfig",
      "description": "This flag will ensure that nothing is changed in the existing containerd config on the system, regardless of other options.",
      "type": "boolean"
    }
  ],
  "collectd": [
    {
      "flag": "version",
      "description": "The version of collectd to be installed",
      "type": "string"
    }
  ],
  "certManager": [
    {
      "flag": "version",
      "description": "The version of Certificate Manager to be installed",
      "type": "string"
    }
  ],
  "metricsServer": [
    {
      "flag": "version",
      "description": "The version of metrics server to be installed",
      "type": "string"
    }
  ],
  "longhorn": [
    {
      "flag": "version",
      "description": "The version of Longhorn to be installed.",
      "type": "string"
    },
    {
      "flag": "uiBindPort",
      "description": "The port number used for the NodePort service exposing the Longhorn UI. Default is 30880.",
      "type": "number"
    },
    {
      "flag": "uiReplicaCount",
      "description": "The number of replicas created for the Longhorn UI Deployment. Default is 0.",
      "type": "number"
    }
  ],
  "ufw": [
    {
      "flag": "bypassUFWWarning",
      "description": "By default, a kURL install will not continue with ufw active. When this flag is set, kURL will continue to install.",
      "type": "boolean"
    },
    {
      "flag": "disableUFW",
      "description": "This is a flag that allows for disabling UFW during the install script without user interaction.",
      "type": "boolean"
    },
    {
      "flag": "hardFailOnUFW",
      "description": "This is a flag that will stop and exit a current install if UFW is active.",
      "type": "boolean"
    }
  ],
  "sonobuoy": [
    {
      "flag": "version",
      "description": "The version of Sonobuoy to be installed.",
      "type": "string"
    }
  ],
  "goldpinger": [
    {
      "flag": "version",
      "description": "The version of Goldpinger to be installed.",
      "type": "string"
    }
  ]
}
